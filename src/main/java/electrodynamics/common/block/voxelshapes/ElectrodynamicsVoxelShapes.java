package electrodynamics.common.block.voxelshapes;

import java.util.stream.Stream;

import net.minecraft.core.Direction;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.phys.shapes.Shapes;

public class ElectrodynamicsVoxelShapes {

    public static void init() {

    }

    public static final VoxelShapeProvider ADVANCED_SOLAR_PANEL = VoxelShapeProvider.createDirectional(
            //
            Direction.NORTH,
            //
            Stream.of(
                    //
                    Block.box(0, 0, 0, 16, 2, 16),
                    //
                    Block.box(2, 2, 2, 14, 3, 14),
                    //
                    Block.box(3, 3, 3, 13, 7, 13),
                    //
                    Block.box(6, 7, 6, 10, 16, 10)
                    //
            ).reduce(Shapes::or).get());

    public static final VoxelShapeProvider CHEMICAL_CRYSTALIZER = VoxelShapeProvider.createDirectional(
            //
            Direction.WEST,
            //
            Stream.of(
                    //
                    Block.box(0, 0, 0, 16, 5, 16),
                    //
                    Block.box(0, 5, 0, 2, 6, 16),
                    //
                    Block.box(2, 5, 0, 4, 6, 2),
                    //
                    Block.box(2, 5, 14, 4, 6, 16),
                    //
                    Block.box(4, 5, 0, 12, 12, 1),
                    //
                    Block.box(4, 5, 15, 12, 12, 16),
                    //
                    Block.box(12, 5, 0, 13, 6, 2),
                    //
                    Block.box(12, 5, 14, 13, 6, 16),
                    //
                    Block.box(13, 5, 0, 16, 16, 2),
                    //
                    Block.box(13, 14, 2, 16, 16, 14),
                    //
                    Block.box(13, 5, 14, 16, 16, 16),
                    //
                    Block.box(15, 5, 4, 16, 12, 12),
                    //
                    Block.box(14, 5, 2, 15, 14, 14)
                    //
            ).reduce(Shapes::or).get());

    public static final VoxelShapeProvider CIRCUIT_BREAKER = VoxelShapeProvider.createDirectional(
            //
            Direction.WEST, Stream.of(
                    //
                    Block.box(0, 0, 0, 16, 2, 16),
                    //
                    Block.box(0, 2, 1, 16, 5, 15),
                    //
                    Block.box(0, 2, 1, 16, 5, 15),
                    //
                    Block.box(1, 5, 2, 15, 15, 14),
                    //
                    Block.box(0, 5, 4, 1, 12, 12),
                    //
                    Block.box(15, 5, 4, 16, 12, 12)
                    //
            ).reduce(Shapes::or).get());

    public static final VoxelShapeProvider COMBUSTION_CHAMBER = VoxelShapeProvider.createDirectional(
            //
            Direction.WEST, Stream.of(
                    //
                    Block.box(1, 0, 0, 15, 1, 16),
                    //
                    Block.box(2, 1, 0, 3, 12, 1),
                    //
                    Block.box(13, 1, 0, 14, 12, 1),
                    //
                    Block.box(3, 12, 0, 13, 13, 1),
                    //
                    Block.box(4, 3, 0, 12, 11, 1),
                    //
                    Block.box(2, 12, 1, 3, 13, 15),
                    //
                    Block.box(3, 1, 1, 13, 12, 15),
                    //
                    Block.box(13, 12, 1, 14, 13, 15),
                    //
                    Block.box(2, 1, 15, 3, 12, 16),
                    //
                    Block.box(13, 1, 15, 14, 12, 16),
                    //
                    Block.box(3, 12, 15, 13, 13, 16),
                    //
                    Block.box(4, 3, 15, 12, 11, 16),
                    //
                    Block.box(2, 3, 1, 3, 4, 2),
                    //
                    Block.box(1, 4, 1, 2, 10, 2),
                    //
                    Block.box(2, 10, 1, 3, 11, 2),
                    //
                    Block.box(2, 3, 7, 3, 4, 9),
                    //
                    Block.box(1, 4, 7, 2, 10, 9),
                    //
                    Block.box(2, 10, 7, 3, 11, 9),
                    //
                    Block.box(2, 3, 14, 3, 4, 15),
                    //
                    Block.box(1, 4, 14, 2, 10, 15),
                    //
                    Block.box(2, 10, 14, 3, 11, 15),
                    //
                    Block.box(13, 3, 1, 14, 4, 2),
                    //
                    Block.box(14, 4, 1, 15, 10, 2),
                    //
                    Block.box(13, 10, 1, 14, 11, 2),
                    //
                    Block.box(13, 3, 7, 14, 4, 9),
                    //
                    Block.box(14, 4, 7, 15, 10, 9),
                    //
                    Block.box(13, 10, 7, 14, 11, 9),
                    //
                    Block.box(13, 3, 14, 14, 4, 15),
                    //
                    Block.box(14, 4, 14, 15, 10, 15),
                    //
                    Block.box(13, 10, 14, 14, 11, 15),
                    //
                    Block.box(4, 12, 4, 5, 13, 5),
                    //
                    Block.box(4, 12, 11, 5, 13, 12),
                    //
                    Block.box(7, 12, 2, 9, 14, 3),
                    //
                    Block.box(7, 14, 3, 9, 15, 4),
                    //
                    Block.box(5, 12, 4, 11, 15, 12),
                    //
                    Block.box(7, 12, 13, 9, 14, 14),
                    //
                    Block.box(7, 14, 12, 9, 15, 13),
                    //
                    Block.box(11, 12, 4, 12, 13, 5),
                    //
                    Block.box(11, 12, 11, 12, 13, 12)
                    //
            ).reduce(Shapes::or).get());

    public static final VoxelShapeProvider DOWNGRADE_TRANSFORMER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.125, 1),
                    //
                    Shapes.box(0, 0.3125, 0.25, 0.0625, 0.75, 0.75),
                    //
                    Shapes.box(0, 0.125, 0.0625, 1, 0.3125, 0.9375),
                    //
                    Shapes.box(0.15625, 0.875, 0.625, 0.84375, 0.9375, 0.8125),
                    //
                    Shapes.box(0.15625, 0.875, 0.1875, 0.84375, 0.9375, 0.375),
                    //
                    Shapes.box(0.625, 0.6875, 0.15625, 0.875, 0.78125, 0.40625),
                    //
                    Shapes.box(0.625, 0.6875, 0.59375, 0.875, 0.78125, 0.84375),
                    //
                    Shapes.box(0.125, 0.6875, 0.59375, 0.375, 0.84375, 0.84375),
                    //
                    Shapes.box(0.125, 0.6875, 0.15625, 0.375, 0.84375, 0.40625),
                    //
                    Shapes.box(0.125, 0.375, 0.59375, 0.375, 0.53125, 0.84375),
                    //
                    Shapes.box(0.125, 0.375, 0.15625, 0.375, 0.53125, 0.40625),
                    //
                    Shapes.box(0.625, 0.4375, 0.15625, 0.875, 0.53125, 0.40625),
                    //
                    Shapes.box(0.625, 0.4375, 0.59375, 0.875, 0.53125, 0.84375),
                    //
                    Shapes.box(0.640625, 0.53125, 0.171875, 0.859375, 0.6875, 0.390625),
                    //
                    Shapes.box(0.640625, 0.53125, 0.609375, 0.859375, 0.6875, 0.828125),
                    //
                    Shapes.box(0.140625, 0.53125, 0.609375, 0.359375, 0.6875, 0.828125),
                    //
                    Shapes.box(0.140625, 0.53125, 0.171875, 0.359375, 0.6875, 0.390625),
                    //
                    Shapes.box(0.15625, 0.3125, 0.625, 0.34375, 0.875, 0.8125),
                    //
                    Shapes.box(0.15625, 0.3125, 0.1875, 0.34375, 0.875, 0.375),
                    //
                    Shapes.box(0.65625, 0.3125, 0.625, 0.84375, 0.875, 0.8125),
                    //
                    Shapes.box(0.65625, 0.3125, 0.1875, 0.84375, 0.875, 0.375),
                    //
                    Shapes.box(0.9375, 0.3125, 0.25, 1, 0.75, 0.75)
                    //
            ).reduce(Shapes::or).get()

    );

    public static final VoxelShapeProvider DOWNGRADE_TRANSFORMER_MK2 = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Block.box(0, 0, 0, 16, 1, 16),
                    //
                    Block.box(1, 1, 1, 15, 15, 15),
                    //
                    Block.box(0, 4, 4, 1, 12, 12),
                    //
                    Block.box(15, 4, 4, 16, 12, 12)
                    //
            ).reduce(Shapes::or).get()

    );

    public static final VoxelShapeProvider ELECTRIC_PUMP = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0.125, 0.5625, 0.375, 0.9375, 0.75, 0.6875),
                    //
                    Shapes.box(0.28125, 0.125, 0.375, 0.875, 0.5625, 0.6875),
                    //
                    Shapes.box(0.375, 0.0625, 0.3125, 0.8125, 0.8125, 0.8125),
                    //
                    Shapes.box(0.5, 0.125, 0.125, 0.6875, 0.1875, 0.3125),
                    //
                    Shapes.box(0.4375, 0.375, 0.25, 0.75, 0.6875, 0.3125),
                    //
                    Shapes.box(0.3125, 0.3125, 0.6875, 0.6875, 0.6875, 1),
                    //
                    Shapes.box(0.53125, 0.1875, 0.125, 0.65625, 0.625, 0.1875),
                    //
                    Shapes.box(0.0625, 0.625, 0.3125, 0.3125, 0.8125, 0.75),
                    //
                    Shapes.box(0.1328125, 0.8125, 0.25, 0.2734375, 0.859375, 0.3125),
                    //
                    Shapes.box(0.5, 0.6875, 0.1875, 0.6875, 0.75, 0.25),
                    //
                    Shapes.box(0.14453125, 0.66015625, 0.25, 0.26171875, 0.77734375, 0.3125),
                    //
                    Shapes.box(0.515625, 0.484375, 0.1875, 0.671875, 0.640625, 0.25),
                    //
                    Shapes.box(0.1328125, 0.8125, 0.25, 0.2734375, 0.859375, 0.3125),
                    //
                    Shapes.box(0.5, 0.6875, 0.1875, 0.6875, 0.75, 0.25),
                    //
                    Shapes.box(0.0625, 0.6484375, 0.25, 0.109375, 0.7890625, 0.3125),
                    //
                    Shapes.box(0.40625, 0.46875, 0.1875, 0.46875, 0.65625, 0.25),
                    //
                    Shapes.box(0.0625, 0.6484375, 0.25, 0.109375, 0.7890625, 0.3125),
                    //
                    Shapes.box(0.40625, 0.46875, 0.1875, 0.46875, 0.65625, 0.25),
                    //
                    Shapes.box(0.1328125, 0.578125, 0.25, 0.2734375, 0.625, 0.3125),
                    //
                    Shapes.box(0.5, 0.375, 0.1875, 0.6875, 0.4375, 0.25),
                    //
                    Shapes.box(0.1328125, 0.578125, 0.25, 0.2734375, 0.625, 0.3125),
                    //
                    Shapes.box(0.5, 0.375, 0.1875, 0.6875, 0.4375, 0.25),
                    //
                    Shapes.box(0.296875, 0.6484375, 0.25, 0.34375, 0.7890625, 0.3125),
                    //
                    Shapes.box(0.71875, 0.46875, 0.1875, 0.78125, 0.65625, 0.25),
                    //
                    Shapes.box(0.296875, 0.6484375, 0.25, 0.34375, 0.7890625, 0.3125),
                    //
                    Shapes.box(0.71875, 0.46875, 0.1875, 0.78125, 0.65625, 0.25),
                    //
                    Shapes.box(0.375, 0.8125, 0.375, 0.6875, 0.875, 0.6875),
                    //
                    Shapes.box(0.4375, 0, 0.375, 0.75, 0.0625, 0.6875),
                    //
                    Shapes.box(0.3125, 0.875, 0.3125, 0.6875, 1.0, 0.6875)
                    //
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider ELECTROLYTIC_SEPARATOR = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0.0057870370370369795, 0, 0, 1.0, 0.1875, 1),
                    //
                    Shapes.box(0.318287037037037, 0.3125, 0.8125, 0.693287037037037, 0.6875, 0.9375),
                    //
                    Shapes.box(0.318287037037037, 0.3125, 0.0625, 0.693287037037037, 0.6875, 0.1875),
                    //
                    Shapes.box(0.443287037037037, 0.8125, 0.25, 0.568287037037037, 0.875, 0.375),
                    //
                    Shapes.box(0.443287037037037, 0.8125, 0.625, 0.568287037037037, 0.875, 0.75),
                    //
                    Shapes.box(0.818287037037037, 0.25, 0.3125, 0.943287037037037, 0.625, 0.6875),
                    //
                    Shapes.box(0.0057870370370369795, 0.25, 0.25, 0.06828703703703698, 0.75, 0.75),
                    //
                    Shapes.box(0.255787037037037, 0.1875, 0.9375, 0.755787037037037, 0.75, 1),
                    //
                    Shapes.box(0.255787037037037, 0.1875, 0, 0.755787037037037, 0.75, 0.0625),
                    //
                    Shapes.box(0.943287037037037, 0.1875, 0.25, 1.0, 0.75, 0.75),
                    //
                    Shapes.box(0.443287037037037, 0.125, 0.25, 0.568287037037037, 0.8125, 0.375),
                    //
                    Shapes.box(0.443287037037037, 0.1875, 0.625, 0.568287037037037, 0.8125, 0.75),
                    //
                    Shapes.box(0.255787037037037, 0.1875, 0.25, 0.693287037037037, 0.3125, 0.75),
                    //
                    Shapes.box(0.693287037037037, 0.1875, 0.25, 0.755787037037037, 0.75, 0.75),
                    //
                    Shapes.box(0.255787037037037, 0.1875, 0.75, 0.755787037037037, 0.75, 0.8125),
                    //
                    Shapes.box(0.255787037037037, 0.1875, 0.1875, 0.755787037037037, 0.75, 0.25),
                    //
                    Shapes.box(0.06828703703703698, 0.1875, 0.0625, 0.255787037037037, 1, 0.9375),
                    //
                    Shapes.box(0.474537037037037, 0.875, 0.6875, 0.537037037037037, 0.9375, 0.859375),
                    //
                    Shapes.box(0.474537037037037, 0.6875, 0.859375, 0.537037037037037, 0.9375, 0.921875),
                    //
                    Shapes.box(0.474537037037037, 0.6875, 0.078125, 0.537037037037037, 0.9375, 0.140625),
                    //
                    Shapes.box(0.474537037037037, 0.875, 0.140625, 0.537037037037037, 0.9375, 0.3125),
                    //
                    Shapes.box(0.849537037037037, 0.1875, 0.6875, 0.912037037037037, 0.5625, 0.75),
                    //
                    Shapes.box(0.849537037037037, 0.1875, 0.75, 0.912037037037037, 0.25, 0.875),
                    //
                    Shapes.box(0.474537037037037, 0.1875, 0.8125, 0.849537037037037, 0.25, 0.875),
                    //
                    Shapes.box(0.849537037037037, 0.1875, 0.25, 0.912037037037037, 0.5625, 0.3125),
                    //
                    Shapes.box(0.849537037037037, 0.1875, 0.125, 0.912037037037037, 0.25, 0.25),
                    //
                    Shapes.box(0.474537037037037, 0.1875, 0.125, 0.849537037037037, 0.25, 0.1875)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider FERMENTATION_PLANT = VoxelShapeProvider.createDirectional(
            //
            Direction.WEST,
            //
            Stream.of(
                    //
                    Block.box(1, 0, 0, 15, 5, 16),
                    //
                    Block.box(5, 5, 0, 11, 11, 1),
                    //
                    Block.box(5, 5, 15, 11, 11, 16),
                    //
                    Block.box(5, 5, 1, 11, 8, 8),
                    //
                    Block.box(3, 5, 2, 4, 8, 3),
                    //
                    Block.box(3, 7, 3, 4, 8, 6),
                    //
                    Block.box(3, 5, 6, 4, 8, 7),
                    //
                    Block.box(12, 5, 2, 13, 8, 3),
                    //
                    Block.box(12, 7, 3, 13, 8, 6),
                    //
                    Block.box(12, 5, 6, 13, 8, 7),
                    //
                    Block.box(4, 8, 2, 5, 9, 3),
                    //
                    Block.box(4, 8, 4, 5, 9, 5),
                    //
                    Block.box(4, 8, 6, 5, 9, 7),
                    //
                    Block.box(11, 8, 2, 12, 9, 3),
                    //
                    Block.box(11, 8, 4, 12, 9, 5),
                    //
                    Block.box(11, 8, 6, 12, 9, 7),
                    //
                    Block.box(1, 5, 4, 2, 8, 5),
                    //
                    Block.box(2, 7, 4, 3, 8, 5),
                    //
                    Block.box(14, 5, 4, 15, 8, 5),
                    //
                    Block.box(13, 7, 4, 14, 8, 5),
                    //
                    Block.box(2, 5, 11, 3, 8, 12),
                    //
                    Block.box(3, 7, 11, 4, 8, 12),
                    //
                    Block.box(13, 5, 11, 14, 8, 12),
                    //
                    Block.box(12, 7, 11, 13, 8, 12),
                    //
                    Block.box(4, 5, 9, 5, 8, 10),
                    //
                    Block.box(4, 7, 10, 5, 8, 13),
                    //
                    Block.box(4, 5, 13, 5, 8, 14),
                    //
                    Block.box(11, 5, 9, 12, 8, 10),
                    //
                    Block.box(11, 7, 10, 12, 8, 13),
                    //
                    Block.box(11, 5, 13, 12, 8, 14),
                    //
                    Block.box(4, 8, 10, 5, 14, 11),
                    //
                    Block.box(5, 13, 10, 6, 14, 11),
                    //
                    Block.box(4, 8, 12, 5, 14, 13),
                    //
                    Block.box(5, 13, 12, 6, 14, 13),
                    //
                    Block.box(11, 8, 10, 12, 14, 11),
                    //
                    Block.box(10, 13, 10, 11, 14, 11),
                    //
                    Block.box(11, 8, 12, 12, 14, 13),
                    //
                    Block.box(10, 13, 12, 11, 14, 13),
                    //
                    Block.box(6, 8, 10, 10, 15, 13),
                    //
                    Block.box(6, 5, 10, 9, 6, 13),
                    //
                    Block.box(7, 6, 11, 8, 7, 12),
                    //
                    Block.box(7.5, 9, 9, 8.5, 10, 10),
                    //
                    Block.box(7.5, 7, 8, 8.5, 9, 9)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider FLUID_PIPE_FILTER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Shapes.or(Block.box(0, 5, 5, 16, 11, 11), Block.box(4, 3, 4, 12, 15, 12))
            //
    );
    public static final VoxelShapeProvider FLUID_PIPE_PUMP = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Block.box(0, 5, 5, 16, 11, 11)
            //
    );
    public static final VoxelShapeProvider FLUID_PIPE_VALVE = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Block.box(0, 5, 5, 16, 11, 11)
            //
    );

    public static final VoxelShapeProvider GAS_PIPE_PUMP = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Block.box(0, 4, 4, 16, 12, 12)
            //
    );
    public static final VoxelShapeProvider GAS_PIPE_FILTER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Shapes.or(Block.box(0, 4, 4, 16, 12, 12), Block.box(4, 3, 4, 12, 15, 12))
            //
    );

    public static final VoxelShapeProvider GAS_PIPE_VALVE = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Block.box(0, 4, 4, 16, 12, 12)
            //
    );

    public static final VoxelShapeProvider HSLA_GAS_TANK = VoxelShapeProvider.createOmni(
            //
            Stream.of(
                    //
                    Block.box(4, 14, 4, 12, 16, 12),
                    //
                    Stream.of(
                            //
                            Block.box(0, 2, 1, 1, 12, 15),
                            //
                            Block.box(1, 2, 0, 15, 12, 16),
                            //
                            Block.box(1, 0, 2, 2, 2, 14),
                            //
                            Block.box(2, 0, 1, 14, 2, 15),
                            //
                            Block.box(14, 0, 2, 15, 2, 14),
                            //
                            Block.box(15, 2, 1, 16, 12, 15),
                            //
                            Block.box(1, 12, 2, 2, 14, 14),
                            //
                            Block.box(2, 12, 1, 14, 14, 15),
                            //
                            Block.box(14, 12, 2, 15, 14, 14)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(7, 14, 13, 9, 15, 14),
                            //
                            Block.box(13, 14, 7, 14, 15, 9),
                            //
                            Block.box(3, 15, 2, 13, 16, 3),
                            //
                            Block.box(3, 15, 13, 13, 16, 14),
                            //
                            Block.box(2, 15, 3, 3, 16, 13),
                            //
                            Block.box(13, 15, 3, 14, 16, 13),
                            //
                            Block.box(7, 14, 2, 9, 15, 3),
                            //
                            Block.box(2, 14, 7, 3, 15, 9)
                            //
                    ).reduce(Shapes::or).get()
                    //
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider HV_CHARGER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.1875, 1),
                    //
                    Shapes.box(0, 0.1875, 0.25, 0.125, 0.8125, 0.75),
                    //
                    Shapes.box(0.1875, 0.45, 0.75, 0.3125, 0.5125, 0.875),
                    //
                    Shapes.box(0.21875, 0.5, 0.84375, 0.28125, 0.5625, 0.90625),
                    //
                    Shapes.box(0.21875, 0.5, 0.71875, 0.28125, 0.5625, 0.78125),
                    //
                    Shapes.box(0.5, 0.45, 0.75, 0.625, 0.5125, 0.875),
                    //
                    Shapes.box(0.53125, 0.5, 0.84375, 0.59375, 0.5625, 0.90625),
                    //
                    Shapes.box(0.53125, 0.5, 0.71875, 0.59375, 0.5625, 0.78125),
                    //
                    Shapes.box(0.15625, 0.1875, 0.09375, 0.34375, 0.5, 0.28125),
                    //
                    Shapes.box(0.46875, 0.1875, 0.09375, 0.65625, 0.5, 0.28125),
                    //
                    Shapes.box(0.46875, 0.1875, 0.71875, 0.65625, 0.5, 0.90625),
                    //
                    Shapes.box(0.15625, 0.1875, 0.71875, 0.34375, 0.5, 0.90625),
                    //
                    Shapes.box(0.1875, 0.45, 0.125, 0.3125, 0.5125, 0.25),
                    //
                    Shapes.box(0.21875, 0.5, 0.21875, 0.28125, 0.5625, 0.28125),
                    //
                    Shapes.box(0.21875, 0.5, 0.09375, 0.28125, 0.5625, 0.15625),
                    //
                    Shapes.box(0.5, 0.45, 0.125, 0.625, 0.5125, 0.25),
                    //
                    Shapes.box(0.53125, 0.5, 0.21875, 0.59375, 0.5625, 0.28125),
                    //
                    Shapes.box(0.53125, 0.5, 0.09375, 0.59375, 0.5625, 0.15625),
                    //
                    Shapes.box(0.375, 0.1875, 0.375, 0.625, 0.5625, 0.625),
                    //
                    Shapes.box(0.4375, 0.5625, 0.40625, 0.5625, 0.9375, 0.46875),
                    //
                    Shapes.box(0.4375, 0.5625, 0.53125, 0.5625, 0.9375, 0.59375),
                    //
                    Shapes.box(0.375, 0.9375, 0.25, 0.6875, 1, 0.75),
                    //
                    Shapes.box(0.46875, 0.875, 0.3125, 0.53125, 0.9375, 0.4375),
                    //
                    Shapes.box(0.46875, 0.875, 0.5625, 0.53125, 0.9375, 0.6875),
                    //
                    Shapes.box(0.375, 1, 0.4375, 0.4375, 1.125, 0.5625),
                    //
                    Shapes.box(0.125, 0.4375, 0.375, 0.3125, 0.6875, 0.625),
                    //
                    Shapes.box(0.1875, 0.5625, 0.21875, 0.25, 0.6265625, 0.40625),
                    //
                    Shapes.box(0.21875, 0.5625, 0.21718749999999998, 0.59375, 0.625, 0.2796875),
                    //
                    Shapes.box(0.21875, 0.5625, 0.7203125, 0.59375, 0.625, 0.7828125),
                    //
                    Shapes.box(0.1875, 0.5625, 0.59375, 0.25, 0.6265625, 0.78125),
                    //
                    Shapes.box(0.21875, 0.5625, 0.84375, 0.78125, 0.625, 0.90625),
                    //
                    Shapes.box(0.71875, 0.1875, 0.84375, 0.78125, 0.5625, 0.90625),
                    //
                    Shapes.box(0.78125, 0.1875, 0.71875, 0.84375, 0.25, 0.90625),
                    //
                    Shapes.box(0.78125, 0.25, 0.65625, 0.84375, 0.3125, 0.78125),
                    //
                    Shapes.box(0.21875, 0.5625, 0.09375, 0.78125, 0.625, 0.15625),
                    //
                    Shapes.box(0.71875, 0.1875, 0.09375, 0.78125, 0.5625, 0.15625),
                    //
                    Shapes.box(0.78125, 0.1875, 0.09375, 0.84375, 0.25, 0.28125),
                    //
                    Shapes.box(0.78125, 0.25, 0.21875, 0.84375, 0.3125, 0.34375),
                    //
                    Shapes.box(0.71875, 0.1875, 0.34375, 0.78125, 0.25, 0.65625),
                    //
                    Shapes.box(0.71875, 0.3125, 0.34375, 0.78125, 0.375, 0.65625),
                    //
                    Shapes.box(0.84375, 0.1875, 0.34375, 0.90625, 0.25, 0.65625),
                    //
                    Shapes.box(0.84375, 0.3125, 0.34375, 0.90625, 0.375, 0.65625),
                    //
                    Shapes.box(0.78125, 0.1875, 0.34375, 0.84375, 0.25, 0.40625),
                    //
                    Shapes.box(0.78125, 0.3125, 0.34375, 0.84375, 0.375, 0.46875),
                    //
                    Shapes.box(0.78125, 0.1875, 0.59375, 0.84375, 0.25, 0.65625),
                    //
                    Shapes.box(0.78125, 0.3125, 0.53125, 0.84375, 0.375, 0.65625),
                    //
                    Shapes.box(0.71875, 0.25, 0.59375, 0.78125, 0.3125, 0.65625),
                    //
                    Shapes.box(0.84375, 0.25, 0.53125, 0.90625, 0.3125, 0.65625),
                    //
                    Shapes.box(0.71875, 0.25, 0.34375, 0.78125, 0.3125, 0.40625),
                    //
                    Shapes.box(0.84375, 0.25, 0.34375, 0.90625, 0.3125, 0.46875),
                    //
                    Shapes.box(0.78125, 0.375, 0.46875, 0.84375, 0.5625, 0.53125),
                    //
                    Shapes.box(0.75, 0.53125, 0.46875, 0.8125, 0.59375, 0.53125),
                    //
                    Shapes.box(0.71875, 0.5625, 0.46875, 0.78125, 0.625, 0.53125),
                    //
                    Shapes.box(0.65625, 0.625, 0.46875, 0.71875, 0.6875, 0.53125),
                    //
                    Shapes.box(0.6875, 0.59375, 0.46875, 0.75, 0.65625, 0.53125),
                    //
                    Shapes.box(0.4375, 0.625, 0.46875, 0.6875, 0.6875, 0.53125),
                    //
                    Shapes.box(0.40625, 0.65625, 0.46875, 0.46875, 0.71875, 0.53125),
                    //
                    Shapes.box(0.34375, 0.71875, 0.46875, 0.40625, 0.78125, 0.53125),
                    //
                    Shapes.box(0.375, 0.6875, 0.46875, 0.4375, 0.75, 0.53125),
                    //
                    Shapes.box(0.3125, 0.75, 0.46875, 0.375, 1.0625, 0.53125)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider HYDROELECTRIC_GENERATOR = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0.06, 0.25, 0.250625, 0.9975, 0.375, 0.750625),
                    //
                    Shapes.box(0.06, 0, 0.09125, 0.9975, 0.25, 0.90375),
                    //
                    Shapes.box(0.56, 0.375, 0.438125, 0.9975, 0.5, 0.563125),
                    //
                    Shapes.box(0.685, 0.375, 0.375625, 0.935, 0.5625, 0.625625),
                    //
                    Shapes.box(0.8725, 0.317394375, 0.33602125, 0.935, 0.379894375, 0.39852125),
                    //
                    Shapes.box(0.685, 0.317394375, 0.33602125, 0.7475, 0.379894375, 0.39852125),
                    //
                    Shapes.box(0.685, 0.317394375, 0.60272875, 0.7475, 0.379894375, 0.66522875),
                    //
                    Shapes.box(0.8725, 0.317394375, 0.60272875, 0.935, 0.379894375, 0.66522875),
                    //
                    Shapes.box(0.06, 0.375, 0.250625, 0.4975, 0.75, 0.750625),
                    //
                    Shapes.box(-0.0025, 0.25, 0.250625, 0.06, 0.75, 0.750625),
                    //
                    Shapes.box(0.4975, 0.375, 0.375625, 0.56, 0.5625, 0.625625),
                    //
                    Shapes.box(0.4975, 0.375, 0.313125, 0.56, 0.4375, 0.375625),
                    //
                    Shapes.box(0.4975, 0.375, 0.625625, 0.56, 0.4375, 0.688125)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider LATHE = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.1875, 1),
                    //
                    Shapes.box(0, 0.1875, 0.25, 0.125, 0.75, 0.75),
                    //
                    Shapes.box(0.25, 0.1875, 0.1875, 0.3125, 0.9375, 0.25),
                    //
                    Shapes.box(0.1875, 0.1875, 0.25, 0.25, 0.9375, 0.3125),
                    //
                    Shapes.box(0.6875, 0.1875, 0.1875, 0.75, 0.9375, 0.25),
                    //
                    Shapes.box(0.75, 0.1875, 0.25, 0.8125, 0.9375, 0.3125),
                    //
                    Shapes.box(0.6875, 0.1875, 0.75, 0.75, 0.9375, 0.8125),
                    //
                    Shapes.box(0.75, 0.1875, 0.6875, 0.8125, 0.9375, 0.75),
                    //
                    Shapes.box(0.25, 0.1875, 0.75, 0.3125, 0.9375, 0.8125),
                    //
                    Shapes.box(0.1875, 0.1875, 0.6875, 0.25, 0.9375, 0.75),
                    //
                    Shapes.box(0.25, 0.9375, 0.25, 0.75, 1, 0.75),
                    //
                    Shapes.box(0.40625, 0.875, 0.34375, 0.59375, 0.9375, 0.65625),
                    //
                    Shapes.box(0.34375, 0.875, 0.40625, 0.40625, 0.9375, 0.59375),
                    //
                    Shapes.box(0.59375, 0.875, 0.40625, 0.65625, 0.9375, 0.59375),
                    //
                    Shapes.box(0.34375, 0.1875, 0.21875, 0.65625, 0.5625, 0.78125),
                    //
                    Shapes.box(0.21875, 0.1875, 0.34375, 0.34375, 0.5625, 0.65625),
                    //
                    Shapes.box(0.65625, 0.1875, 0.34375, 0.78125, 0.5625, 0.65625),
                    //
                    Shapes.box(0.28125, 0.1875, 0.28125, 0.34375, 0.5625, 0.34375),
                    //
                    Shapes.box(0.28125, 0.1875, 0.65625, 0.34375, 0.5625, 0.71875),
                    //
                    Shapes.box(0.65625, 0.1875, 0.28125, 0.71875, 0.5625, 0.34375),
                    //
                    Shapes.box(0.65625, 0.1875, 0.65625, 0.71875, 0.5625, 0.71875),
                    //
                    Shapes.box(0.40625, 0.5625, 0.34375, 0.59375, 0.625, 0.65625),
                    //
                    Shapes.box(0.34375, 0.5625, 0.40625, 0.40625, 0.625, 0.59375),
                    //
                    Shapes.box(0.59375, 0.5625, 0.40625, 0.65625, 0.625, 0.59375),
                    //
                    Shapes.box(0.46875, 0.84375, 0.40625, 0.53125, 0.875, 0.59375),
                    //
                    Shapes.box(0.40625, 0.8421875, 0.46875, 0.59375, 0.875, 0.53125),
                    //
                    Shapes.box(0.46875, 0.8328125, 0.46875, 0.53125, 0.8421875, 0.53125),
                    //
                    Shapes.box(0.4921874999999999, 0.8015625, 0.4921875000000001, 0.5078124999999999, 0.8578125, 0.5078125000000001),
                    //
                    Shapes.box(0.125, 0.1875, 0.125, 0.875, 0.25, 0.875)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider LV_CHARGER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.1875, 1),
                    //
                    Shapes.box(0, 0.1875, 0.25, 0.125, 0.8125, 0.75),
                    //
                    Shapes.box(0.375, 0.1875, 0.375, 0.625, 0.5625, 0.625),
                    //
                    Shapes.box(0.4375, 0.5625, 0.4375, 0.5625, 0.9375, 0.5625),
                    //
                    Shapes.box(0.375, 0.9375, 0.25, 0.6875, 1, 0.75),
                    //
                    Shapes.box(0.46875, 0.875, 0.3125, 0.53125, 0.9375, 0.4375),
                    //
                    Shapes.box(0.46875, 0.875, 0.5625, 0.53125, 0.9375, 0.6875),
                    //
                    Shapes.box(0.125, 0.4375, 0.375, 0.1875, 0.6875, 0.625),
                    //
                    Shapes.box(0.1875, 0.5625, 0.46875, 0.25, 0.625, 0.53125),
                    //
                    Shapes.box(0.375, 1, 0.4375, 0.4375, 1.125, 0.5625),
                    //
                    Shapes.box(0.3125, 0.875, 0.46875, 0.375, 1.0625, 0.53125),
                    //
                    Shapes.box(0.25, 0.59375, 0.46875, 0.3125, 0.90625, 0.53125)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider MOTOR_COMPLEX = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.0625, 1),
                    //
                    Shapes.box(0, 0.0625, 0, 0.1875, 1, 0.125),
                    //
                    Shapes.box(0, 0.0625, 0.875, 0.1875, 1, 1),
                    //
                    Shapes.box(0, 0.875, 0.125, 0.1875, 1, 0.875),
                    //
                    Shapes.box(0.0625, 0.125, 0.125, 0.125, 0.875, 0.875),
                    //
                    Shapes.box(0, 0.25, 0.25, 0.0625, 0.75, 0.75),
                    //
                    Shapes.box(0.125, 0.25, 0.25, 0.1875, 0.75, 0.75),
                    //
                    Shapes.box(0, 0.0625, 0.125, 0.1875, 0.125, 0.875),
                    //
                    Shapes.box(0.5625, 0.0625, 0.03125, 0.8125, 0.625, 0.125),
                    //
                    Shapes.box(0.5625, 0.0625, 0.875, 0.8125, 0.625, 0.96875),
                    //
                    Shapes.box(0.1875, 0.4375, 0, 0.5625, 0.5625, 0.125),
                    //
                    Shapes.box(0.1875, 0.4375, 0.875, 0.5625, 0.5625, 1),
                    //
                    Shapes.box(0.1875, 0.875, 0.4375, 0.4375, 1, 0.5625),
                    //
                    Shapes.box(0.5, 0.0625, 0.75, 0.875, 0.125, 0.875),
                    //
                    Shapes.box(0.5, 0.0625, 0.125, 0.875, 0.125, 0.25),
                    //
                    Shapes.box(0.5, 0.125, 0.71875, 0.875, 0.1875, 0.78125),
                    //
                    Shapes.box(0.5, 0.125, 0.21875, 0.875, 0.1875, 0.28125),
                    //
                    Shapes.box(0.4375, 0.125, 0.3125, 0.9375, 0.875, 0.6875),
                    //
                    Shapes.box(0.4375, 0.3125, 0.125, 0.9375, 0.6875, 0.875),
                    //
                    Shapes.box(0.4375, 0.6875, 0.6875, 0.9375, 0.75, 0.8125),
                    //
                    Shapes.box(0.4375, 0.75, 0.6875, 0.9375, 0.8125, 0.75),
                    //
                    Shapes.box(0.4375, 0.1875, 0.6875, 0.9375, 0.25, 0.75),
                    //
                    Shapes.box(0.4375, 0.25, 0.6875, 0.9375, 0.3125, 0.8125),
                    //
                    Shapes.box(0.4375, 0.75, 0.25, 0.9375, 0.8125, 0.3125),
                    //
                    Shapes.box(0.4375, 0.6875, 0.1875, 0.9375, 0.75, 0.3125),
                    //
                    Shapes.box(0.4375, 0.25, 0.1875, 0.9375, 0.3125, 0.3125),
                    //
                    Shapes.box(0.4375, 0.1875, 0.25, 0.9375, 0.25, 0.3125),
                    //
                    Shapes.box(0.9375, 0.25, 0.25, 1, 0.75, 0.75),
                    //
                    Shapes.box(0.375, 0.3125, 0.25, 0.4375, 0.6875, 0.75),
                    //
                    Shapes.box(0.375, 0.25, 0.3125, 0.4375, 0.3125, 0.6875),
                    //
                    Shapes.box(0.375, 0.6875, 0.3125, 0.4375, 0.75, 0.6875),
                    //
                    Shapes.box(0.75, 0.703125, 0.125, 0.875, 0.765625, 0.375),
                    //
                    Shapes.box(0.5, 0.703125, 0.125, 0.625, 0.765625, 0.375),
                    //
                    Shapes.box(0.5, 0.703125, 0.609375, 0.625, 0.765625, 0.859375),
                    //
                    Shapes.box(0.75, 0.703125, 0.609375, 0.875, 0.765625, 0.859375),
                    //
                    Shapes.box(0.4375, 0.875, 0.375, 0.8125, 0.953125, 0.625)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider MV_CHARGER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.1875, 1),
                    //
                    Shapes.box(0, 0.1875, 0.25, 0.125, 0.8125, 0.75),
                    //
                    Shapes.box(0.15625, 0.1875, 0.09375, 0.34375, 0.5, 0.28125),
                    //
                    Shapes.box(0.15625, 0.1875, 0.71875, 0.34375, 0.5, 0.90625),
                    //
                    Shapes.box(0.1875, 0.45, 0.75, 0.3125, 0.5125, 0.875),
                    //
                    Shapes.box(0.21875, 0.5, 0.84375, 0.28125, 0.5625, 0.90625),
                    //
                    Shapes.box(0.21875, 0.5, 0.71875, 0.28125, 0.5625, 0.78125),
                    //
                    Shapes.box(0.1875, 0.45, 0.125, 0.3125, 0.5125, 0.25),
                    //
                    Shapes.box(0.21875, 0.5, 0.21875, 0.28125, 0.5625, 0.28125),
                    //
                    Shapes.box(0.21875, 0.5, 0.09375, 0.28125, 0.5625, 0.15625),
                    //
                    Shapes.box(0.375, 0.1875, 0.375, 0.625, 0.5625, 0.625),
                    //
                    Shapes.box(0.4375, 0.5625, 0.4375, 0.5625, 0.9375, 0.5625),
                    //
                    Shapes.box(0.375, 0.9375, 0.25, 0.6875, 1, 0.75),
                    //
                    Shapes.box(0.46875, 0.875, 0.3125, 0.53125, 0.9375, 0.4375),
                    //
                    Shapes.box(0.46875, 0.875, 0.5625, 0.53125, 0.9375, 0.6875),
                    //
                    Shapes.box(0.375, 1, 0.4375, 0.4375, 1.125, 0.5625),
                    //
                    Shapes.box(0.125, 0.4375, 0.375, 0.1875, 0.6875, 0.625),
                    //
                    Shapes.box(0.1875, 0.5625, 0.53125, 0.25, 0.625, 0.59375),
                    //
                    Shapes.box(0.1875, 0.5625, 0.40625, 0.25, 0.625, 0.46875),
                    //
                    Shapes.box(0.21875, 0.5625, 0.21875, 0.28125, 0.6265625, 0.46875),
                    //
                    Shapes.box(0.21875, 0.5625, 0.53125, 0.28125, 0.6265625, 0.78125),
                    //
                    Shapes.box(0.40625, 0.1875, 0.84375, 0.46875, 0.5625, 0.90625),
                    //
                    Shapes.box(0.21875, 0.5625, 0.84375, 0.46875, 0.625, 0.90625),
                    //
                    Shapes.box(0.21875, 0.5625, 0.09375, 0.46875, 0.625, 0.15625),
                    //
                    Shapes.box(0.40625, 0.1875, 0.09375, 0.46875, 0.5625, 0.15625),
                    //
                    Shapes.box(0.78125, 0.1875, 0.09375, 0.84375, 0.25, 0.34375),
                    //
                    Shapes.box(0.78125, 0.1875, 0.65625, 0.84375, 0.25, 0.90625),
                    //
                    Shapes.box(0.78125, 0.25, 0.59375, 0.84375, 0.3125, 0.71875),
                    //
                    Shapes.box(0.78125, 0.25, 0.28125, 0.84375, 0.3125, 0.40625),
                    //
                    Shapes.box(0.46875, 0.1875, 0.09375, 0.78125, 0.25, 0.15625),
                    //
                    Shapes.box(0.46875, 0.1875, 0.84375, 0.78125, 0.25, 0.90625),
                    //
                    Shapes.box(0.71875, 0.1875, 0.40625, 0.78125, 0.25, 0.59375),
                    //
                    Shapes.box(0.71875, 0.3125, 0.40625, 0.78125, 0.375, 0.59375),
                    //
                    Shapes.box(0.84375, 0.1875, 0.40625, 0.90625, 0.25, 0.59375),
                    //
                    Shapes.box(0.84375, 0.3125, 0.40625, 0.90625, 0.375, 0.59375),
                    //
                    Shapes.box(0.78125, 0.1875, 0.40625, 0.84375, 0.25, 0.46875),
                    //
                    Shapes.box(0.78125, 0.3125, 0.40625, 0.84375, 0.375, 0.46875),
                    //
                    Shapes.box(0.78125, 0.1875, 0.53125, 0.84375, 0.25, 0.59375),
                    //
                    Shapes.box(0.78125, 0.3125, 0.53125, 0.84375, 0.375, 0.59375),
                    //
                    Shapes.box(0.71875, 0.25, 0.53125, 0.78125, 0.3125, 0.59375),
                    //
                    Shapes.box(0.84375, 0.25, 0.53125, 0.90625, 0.3125, 0.59375),
                    //
                    Shapes.box(0.71875, 0.25, 0.40625, 0.78125, 0.3125, 0.46875),
                    //
                    Shapes.box(0.84375, 0.25, 0.40625, 0.90625, 0.3125, 0.46875),
                    //
                    Shapes.box(0.78125, 0.375, 0.46875, 0.84375, 0.5, 0.53125),
                    //
                    Shapes.box(0.75, 0.46875, 0.5, 0.8125, 0.53125, 0.5625),
                    //
                    Shapes.box(0.71875, 0.5, 0.53125, 0.78125, 0.5625, 0.59375),
                    //
                    Shapes.box(0.6875, 0.53125, 0.5625, 0.75, 0.59375, 0.625),
                    //
                    Shapes.box(0.40625, 0.5625, 0.59375, 0.71875, 0.625, 0.65625),
                    //
                    Shapes.box(0.375, 0.59375, 0.5625, 0.4375, 0.65625, 0.625),
                    //
                    Shapes.box(0.3125, 0.65625, 0.5, 0.375, 0.71875, 0.5625),
                    //
                    Shapes.box(0.34375, 0.625, 0.53125, 0.40625, 0.6875, 0.59375),
                    //
                    Shapes.box(0.3125, 0.6875, 0.46875, 0.375, 1.0625, 0.53125)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider POTENTIOMETER = VoxelShapeProvider.createOmni(
            //
            Stream.of(
                    //
                    Stream.of(
                            //
                            Block.box(0, 0, 0, 16, 1, 16),
                            //
                            Block.box(0, 1, 0, 1, 11, 1),
                            //
                            Block.box(0, 1, 15, 1, 11, 16),
                            //
                            Block.box(15, 1, 15, 16, 11, 16),
                            //
                            Block.box(15, 1, 0, 16, 11, 1),
                            //
                            Block.box(1, 10, 0, 4, 11, 1),
                            //
                            Block.box(12, 10, 0, 15, 11, 1),
                            //
                            Block.box(1, 10, 15, 4, 11, 16),
                            //
                            Block.box(12, 10, 15, 15, 11, 16),
                            //
                            Block.box(0, 10, 1, 1, 11, 4),
                            //
                            Block.box(0, 10, 12, 1, 11, 15),
                            //
                            Block.box(15, 10, 1, 16, 11, 4),
                            //
                            Block.box(15, 10, 12, 16, 11, 15)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(2, 1, 2, 14, 12, 14),
                            //
                            Block.box(4, 12, 4, 12, 13, 12),
                            //
                            Block.box(6.5, 13, 6.5, 9.5, 17, 9.5)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(4, 4, 0, 12, 12, 1),
                            //
                            Block.box(5, 5, 1, 11, 11, 2),
                            //
                            Block.box(5, 5, 14, 11, 11, 15),
                            //
                            Block.box(4, 4, 15, 12, 12, 16),
                            //
                            Block.box(0, 4, 4, 1, 12, 12),
                            //
                            Block.box(15, 4, 4, 16, 12, 12),
                            //
                            Block.box(14, 5, 5, 15, 11, 11),
                            //
                            Block.box(1, 5, 5, 2, 11, 11)
                            //
                    ).reduce(Shapes::or).get()
                    //
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider REINFORCED_GAS_TANK = VoxelShapeProvider.createOmni(
            //
            Stream.of(
                    //
                    Block.box(4, 14, 4, 12, 16, 12),
                    //
                    Stream.of(
                            //
                            Block.box(0, 2, 1, 1, 12, 15),
                            //
                            Block.box(1, 2, 0, 15, 12, 16),
                            //
                            Block.box(1, 0, 2, 2, 2, 14),
                            //
                            Block.box(2, 0, 1, 14, 2, 15),
                            //
                            Block.box(14, 0, 2, 15, 2, 14),
                            //
                            Block.box(15, 2, 1, 16, 12, 15),
                            //
                            Block.box(1, 12, 2, 2, 14, 14),
                            //
                            Block.box(2, 12, 1, 14, 14, 15),
                            //
                            Block.box(14, 12, 2, 15, 14, 14)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(7, 14, 13, 9, 15, 14),
                            //
                            Block.box(13, 14, 7, 14, 15, 9),
                            //
                            Block.box(3, 15, 2, 13, 16, 3),
                            //
                            Block.box(3, 15, 13, 13, 16, 14),
                            //
                            Block.box(2, 15, 3, 3, 16, 13),
                            //
                            Block.box(13, 15, 3, 14, 16, 13),
                            //
                            Block.box(7, 14, 2, 9, 15, 3),
                            //
                            Block.box(2, 14, 7, 3, 15, 9)
                            //
                    ).reduce(Shapes::or).get()
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider ROTARY_UNIFIER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Stream.of(
                            //
                            Block.box(0, 0, 0, 16, 5, 16),
                            //
                            Block.box(0, 15, 0, 16, 16, 16),
                            //
                            Block.box(1, 5, 1, 15, 15, 7),
                            //
                            Block.box(1, 5, 9, 15, 15, 15),
                            //
                            Block.box(3, 5, 7, 13, 15, 9),
                            //
                            Block.box(4, 5, 0, 12, 12, 1),
                            //
                            Block.box(4, 5, 15, 12, 12, 16),
                            //
                            Block.box(0, 13, 0, 16, 14, 1),
                            //
                            Block.box(0, 13, 15, 16, 14, 16),
                            //
                            Block.box(0, 13, 1, 1, 14, 15),
                            //
                            Block.box(15, 13, 1, 16, 14, 15)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(1.5, 6, 7, 2.5, 7, 9),
                            //
                            Block.box(1.5, 8, 7, 2.5, 9, 9),
                            //
                            Block.box(1.5, 10, 7, 2.5, 11, 9),
                            //
                            Block.box(1.5, 12, 7, 2.5, 13, 9)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(13.5, 6, 7, 14.5, 7, 9),
                            //
                            Block.box(13.5, 8, 7, 14.5, 9, 9),
                            //
                            Block.box(13.5, 10, 7, 14.5, 11, 9),
                            //
                            Block.box(13.5, 12, 7, 14.5, 13, 9)
                            //
                    ).reduce(Shapes::or).get()
                    //
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider SOLAR_PANEL = VoxelShapeProvider.createOmni(
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.0625, 0.0625),
                    //
                    Shapes.box(0, 0, 0.9375, 1, 0.0625, 1),
                    //
                    Shapes.box(0.9375, 0, 0.0625, 1, 0.0625, 0.9375),
                    //
                    Shapes.box(0.25, 0, 0.25, 0.75, 0.0625, 0.75),
                    //
                    Shapes.box(0, 0, 0.0625, 0.0625, 0.0625, 0.9375),
                    //
                    Shapes.box(0, 0.0625, 0, 1, 0.125, 1),
                    //
                    Shapes.box(0.125, 0.125, 0.125, 0.875, 0.1875, 0.875),
                    //
                    Shapes.box(0.125, 0.4375, 0.125, 0.875, 0.5, 0.875),
                    //
                    Shapes.box(0.1875, 0.1875, 0.1875, 0.8125, 0.4375, 0.8125),
                    //
                    Shapes.box(0, 0.5, 0, 1, 0.5625, 1)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider STEEL_GAS_TANK = VoxelShapeProvider.createOmni(
            //
            Stream.of(
                    //
                    Block.box(4, 14, 4, 12, 16, 12),
                    //
                    Stream.of(
                            //
                            Block.box(0, 2, 1, 1, 12, 15),
                            //
                            Block.box(1, 2, 0, 15, 12, 16),
                            //
                            Block.box(1, 0, 2, 2, 2, 14),
                            //
                            Block.box(2, 0, 1, 14, 2, 15),
                            //
                            Block.box(14, 0, 2, 15, 2, 14),
                            //
                            Block.box(15, 2, 1, 16, 12, 15),
                            //
                            Block.box(1, 12, 2, 2, 14, 14),
                            //
                            Block.box(2, 12, 1, 14, 14, 15),
                            //
                            Block.box(14, 12, 2, 15, 14, 14)
                            //
                    ).reduce(Shapes::or).get(),
                    //
                    Stream.of(
                            //
                            Block.box(7, 14, 13, 9, 15, 14),
                            //
                            Block.box(13, 14, 7, 14, 15, 9),
                            //
                            Block.box(3, 15, 2, 13, 16, 3),
                            //
                            Block.box(3, 15, 13, 13, 16, 14),
                            //
                            Block.box(2, 15, 3, 3, 16, 13),
                            //
                            Block.box(13, 15, 3, 14, 16, 13),
                            //
                            Block.box(7, 14, 2, 9, 15, 3),
                            //
                            Block.box(2, 14, 7, 3, 15, 9)
                            //
                    ).reduce(Shapes::or).get()
                    //
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider THERMOELECTRIC_GENERATOR = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0.0625, 0, 0.125, 0.4375, 0.875, 0.9375),
                    //
                    Shapes.box(0.25, 0.875, 0.25, 0.75, 1, 0.75),
                    //
                    Shapes.box(0.4375, 0, 0.125, 0.875, 0.03125, 0.9375),
                    //
                    Shapes.box(0, 0, 0, 0.0625, 0.9375, 1),
                    //
                    Shapes.box(0.1875, 0.5625, 0.0625, 0.375, 0.75, 0.125),
                    //
                    Shapes.box(0.1875, 0.25, 0.0625, 0.375, 0.4375, 0.125),
                    //
                    Shapes.box(0.5625, 0.5625, 0.125, 0.75, 0.75, 0.1875),
                    //
                    Shapes.box(0.5625, 0.25, 0.125, 0.75, 0.4375, 0.1875),
                    //
                    Shapes.box(0.625, 0.625, 0.0625, 0.6875, 0.6875, 0.125),
                    //
                    Shapes.box(0.625, 0.3125, 0.0625, 0.6875, 0.375, 0.125),
                    //
                    Shapes.box(0.25, 0.625, 0, 0.6875, 0.6875, 0.0625),
                    //
                    Shapes.box(0.25, 0.3125, 0, 0.6875, 0.375, 0.0625),
                    //
                    Shapes.box(0.5, 0.125, 0.15625, 0.84375, 0.875, 0.65625),
                    //
                    Shapes.box(0.4375, 0.46875, 0.140625, 0.859375, 0.53125, 0.671875),
                    //
                    Shapes.box(0.75, 0.6875, 0.796875, 0.8125, 0.71875, 0.953125),
                    //
                    Shapes.box(0.875, 0.540625, 0.4125, 0.8875, 0.571875, 0.50625),
                    //
                    Shapes.box(0.5, 0.734375, 0.796875, 0.5625, 0.765625, 0.953125),
                    //
                    Shapes.box(0.75, 0.59375, 0.796875, 0.8125, 0.625, 0.953125),
                    //
                    Shapes.box(0.5, 0.640625, 0.796875, 0.5625, 0.671875, 0.953125),
                    //
                    Shapes.box(0.75, 0.515625, 0.796875, 0.8125, 0.546875, 0.953125),
                    //
                    Shapes.box(0.5, 0.5625, 0.796875, 0.5625, 0.59375, 0.953125),
                    //
                    Shapes.box(0.75, 0.421875, 0.796875, 0.8125, 0.453125, 0.953125),
                    //
                    Shapes.box(0.5, 0.46875, 0.796875, 0.5625, 0.5, 0.953125),
                    //
                    Shapes.box(0.75, 0.34375, 0.796875, 0.8125, 0.375, 0.953125),
                    //
                    Shapes.box(0.5, 0.390625, 0.796875, 0.5625, 0.421875, 0.953125),
                    //
                    Shapes.box(0.75, 0.25, 0.796875, 0.8125, 0.28125, 0.953125),
                    //
                    Shapes.box(0.5, 0.296875, 0.796875, 0.5625, 0.328125, 0.953125),
                    //
                    Shapes.box(0.734375, 0.09375, 0.90625, 0.78125, 0.21875, 0.9375),
                    //
                    Shapes.box(0.734375, 0.0625, 0.375, 0.78125, 0.09375, 0.9375),
                    //
                    Shapes.box(0.625, 0.0625, 0.375, 0.734375, 0.09375, 0.4375),
                    //
                    Shapes.box(0.5625, 0.09375, 0.3125, 0.75, 0.15625, 0.5),
                    //
                    Shapes.box(0.625, 0.796875, 0.703125, 0.6875, 0.828125, 0.8125),
                    //
                    Shapes.box(0.5625, 0.65625, 0.625, 0.75, 0.84375, 0.6875),
                    //
                    Shapes.box(0.8125, 0.46875, 0.3125, 0.875, 0.71875, 0.5625),
                    //
                    Shapes.box(0.63125, 0.715625, 0.65, 0.68125, 0.840625, 0.7125),
                    //
                    Shapes.box(0.4375, 0.15625, 0.140625, 0.859375, 0.21875, 0.671875),
                    //
                    Shapes.box(0.375, 0.15625, 0.8125, 0.75, 0.1875, 0.921875),
                    //
                    Shapes.box(0.375, 0.809375, 0.8125, 0.75, 0.840625, 0.921875),
                    //
                    Shapes.box(0.515625, 0.1875, 0.765625, 0.796875, 0.8125, 0.984375)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider UPGRADE_TRANSFORMER = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.125, 1),
                    //
                    Shapes.box(0, 0.3125, 0.25, 0.0625, 0.75, 0.75),
                    //
                    Shapes.box(0, 0.125, 0.0625, 1, 0.3125, 0.9375),
                    //
                    Shapes.box(0.15625, 0.875, 0.625, 0.84375, 0.9375, 0.8125),
                    //
                    Shapes.box(0.15625, 0.875, 0.1875, 0.84375, 0.9375, 0.375),
                    //
                    Shapes.box(0.125, 0.6875, 0.59375, 0.375, 0.78125, 0.84375),
                    //
                    Shapes.box(0.625, 0.375, 0.59375, 0.875, 0.53125, 0.84375),
                    //
                    Shapes.box(0.625, 0.375, 0.15625, 0.875, 0.53125, 0.40625),
                    //
                    Shapes.box(0.625, 0.6875, 0.59375, 0.875, 0.84375, 0.84375),
                    //
                    Shapes.box(0.625, 0.6875, 0.15625, 0.875, 0.84375, 0.40625),
                    //
                    Shapes.box(0.125, 0.6875, 0.15625, 0.375, 0.78125, 0.40625),
                    //
                    Shapes.box(0.125, 0.4375, 0.59375, 0.375, 0.53125, 0.84375),
                    //
                    Shapes.box(0.125, 0.4375, 0.15625, 0.375, 0.53125, 0.40625),
                    //
                    Shapes.box(0.140625, 0.53125, 0.609375, 0.359375, 0.6875, 0.828125),
                    //
                    Shapes.box(0.640625, 0.53125, 0.609375, 0.859375, 0.6875, 0.828125),
                    //
                    Shapes.box(0.640625, 0.53125, 0.171875, 0.859375, 0.6875, 0.390625),
                    //
                    Shapes.box(0.140625, 0.53125, 0.171875, 0.359375, 0.6875, 0.390625),
                    //
                    Shapes.box(0.15625, 0.3125, 0.625, 0.34375, 0.875, 0.8125),
                    //
                    Shapes.box(0.15625, 0.3125, 0.1875, 0.34375, 0.875, 0.375),
                    //
                    Shapes.box(0.65625, 0.3125, 0.625, 0.84375, 0.875, 0.8125),
                    //
                    Shapes.box(0.65625, 0.3125, 0.1875, 0.84375, 0.875, 0.375),
                    //
                    Shapes.box(0.9375, 0.3125, 0.25, 1, 0.75, 0.75)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider UPGRADE_TRANSFORMER_MK2 = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Block.box(0, 0, 0, 16, 1, 16),
                    //
                    Block.box(1, 1, 1, 15, 15, 15),
                    //
                    Block.box(0, 4, 4, 1, 12, 12),
                    //
                    Block.box(15, 4, 4, 16, 12, 12)
                    //
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider WINDMILL = VoxelShapeProvider.createOmni(
            //
            Stream.of(
                    //
                    Block.box(2, 0, 2, 14, 2, 14),
                    //
                    Block.box(3, 2, 3, 13, 3, 13),
                    //
                    Block.box(5, 3, 5, 11, 16, 11)
                    //    
            ).reduce(Shapes::or).get()
            //
    );

    public static final VoxelShapeProvider WIREMILL = VoxelShapeProvider.createDirectional(
            //
            Direction.EAST,
            //
            Stream.of(
                    //
                    Shapes.box(0, 0, 0, 1, 0.3125, 1),
                    //
                    Shapes.box(0.0625, 0.3125, 0, 0.3125, 1, 1),
                    //
                    Shapes.box(0.3125, 0.3125, 0.125, 0.6875, 0.375, 0.5625),
                    //
                    Shapes.box(0.375, 0.625, 0.9375, 0.4375, 0.75, 1),
                    //
                    Shapes.box(0.5625, 0.625, 0.9375, 0.625, 0.75, 1),
                    //
                    Shapes.box(0.4375, 0.75, 0.9375, 0.5625, 0.8125, 1),
                    //
                    Shapes.box(0.421875, 0.640625, 0.125, 0.578125, 0.796875, 0.5625),
                    //
                    Shapes.box(0.421875, 0.421875, 0.125, 0.578125, 0.578125, 0.5625),
                    //
                    Shapes.box(0.4375, 0.5625, 0.9375, 0.5625, 0.625, 1),
                    //
                    Shapes.box(0, 0.3125, 0.25, 0.0625, 0.75, 0.75),
                    //
                    Shapes.box(0, 0.3125, 0, 0.0625, 1, 0.125),
                    //
                    Shapes.box(0, 0.875, 0.125, 0.0625, 1, 0.875),
                    //
                    Shapes.box(0, 0.3125, 0.875, 0.0625, 1, 1),
                    //
                    Shapes.box(0.3125, 0.3125, 0.6875, 0.6875, 0.9375, 0.9375),
                    //
                    Shapes.box(0.3125, 0.3125, 0, 0.6875, 0.9375, 0.125),
                    //
                    Shapes.box(0.3125, 0.3125, 0.5625, 0.6875, 0.9375, 0.6875),
                    //
                    Shapes.box(0.6875, 0.3125, 0.6875, 1, 0.625, 0.9375)
                    //    
            ).reduce(Shapes::or).get()
            //
    );


}
